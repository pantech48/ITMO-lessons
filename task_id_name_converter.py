'''
Требуется реализовать две функции для конвертации имен идентификаторов.

Имя идентификатора в ЯП - это имена переменных, констант, функций, классов и т.д.

CamelCase (верблюжия нотация) - стиль написания составных слов, при котором несколько слов пишутся слитно без пробелов, при этом каждое слово внутри фразы пишется с заглавной буквы.

snake_case (змеиная нотация) - стиль написания составных слов, при котором несколько слов разделяются символом подчеркивания (_), и не имеют пробелов в записи, причём каждое слово пишется с маленькой буквы.

Напишите функцию camel_to_snake(name), которая принимает в качестве единственного аргумента имя идентификатора в CamelCase нотации и возвращает его запись в змеиной нотации.
Напишите функцию snake_to_camel(name), которая принимает в качестве единственного аргумента имя идентификатора в змеиной нотации и возвращает его запись в CamelCase нотации.
'''

def snake_to_camel(name):

	cam_lst = name.split('_') # Выводим список слов без '_'

	cam_str1 = ' '.join(cam_lst) # Вывод слитной строки

	cam_upc = cam_str1.title() 

	cam_filt = tuple(filter(lambda x: x != " ", cam_upc)) # Убираем пробелы

	return ''.join(cam_filt) 

def camel_to_snake(name):

	snk_lst = list(name)

	i = 0

	while i < len(snk_lst):			# так и не смог сообразить, как это сделать с помощью map или filter

		if snk_lst[i].isupper():
			snk_lst.insert(i, '_')
			i += 1
		i += 1

	snk_lst.remove(snk_lst[0])

	return (''.join(snk_lst)).lower()

